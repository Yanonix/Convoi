#    rte
#    an airplug compatible program
#    author: Bertrand Ducourthial AT utc.fr, Anthony Buisset (v0.1)
#    license type: free of charge license for academic and research purpose
#    see license.txt
### MODULE RECEPTION ##########################################################

### VARIABLES DU MODULE #######################################################
# dernier message recu
set RTE_rcv_msg $APG_msg_unknown

# application emettrice du dernier message (en cas d'option --whatwho)
set RTE_rcv_app $APG_msg_unknown

###############################################################################


### ZONE DU MODULE ############################################################
## zone du module reception
labelframe .rcv -pady 2 -padx 2 \
    -text "Réception \[$APP, ident = $APG_ident\]"  -fg $APG_int_coltitle

label .rcv.t1 -text "Dernier message reçu de "
label .rcv.app -textvariable RTE_rcv_app -width 4 -fg $APG_int_colmsgrcv
label .rcv.t2 -text " : "
label .rcv.msg -textvariable RTE_rcv_msg -width 64  -fg $APG_int_colmsgrcv -anchor w
pack .rcv.t1 .rcv.app .rcv.t2 .rcv.msg -side left -fill y -pady 2

# affichage des sous-zones de la zone rcv
pack .rcv.msg .rcv.app -side left -fill y -pady 2
###############################################################################


### OPTIONS DE LA LIGNE DE COMMANDE ###########################################
foreach option $APG_lstargs {
    set name [lindex [split $option "="] 0]
    set value [lindex [split $option "="] 1]
    
    switch -- $name {
				--source {
						#--------------------------------------------------------------------------------
						# applications emettrices auxquelles il faut s'abonner
						#--------------------------------------------------------------------------------
						if { $value == "" } {
								APG_vrb_dispwarning "option $name trouvee sans argument ; ignoree"
						} else {
								APG_vrb_dispnotif "option $option trouvee, abonnement a l'app source $value"
								APG_begin_lch $value
						}
				}
    }
}
###############################################################################

### PROCEDURES DU MODULE ######################################################

#-- Procedure APG_receive_whatwho --------------------------------------------#
# Action : gere la reception de messages                                      #
# Remarq : surcharge de LIBAPGTK                                              #
# Entree : payload et emetteur                                                #
# Retour : rien                                                               #
#-----------------------------------------------------------------------------#
proc APG_receive_whatwho { what who } {

		# Mise a jour de l'interface du module rcv.
    set ::RTE_rcv_msg $what
    set ::RTE_rcv_app $who

		# Traitement different selon l'emetteur.
    switch -- $::RTE_rcv_app \
				PHY {
						# Reception d'un message d'une application PHY

						set typeCom  [APG_msg_splitstr what $::CMN_mnemotypecom]

						
						

						if { $typeCom == $::CMN_mnemotypecom_beacon } {

							APG_vrb_dispnotif "$who>RTE | typeCom = $typeCom | $what" "APG_receive_whatwho_default" 3

							RTE_beacon_discover $what

						} elseif { ($typeCom == $::CMN_mnemotypecom_unicast || \
								    $typeCom == $::CMN_mnemotypecom_multicast) } {

							APG_vrb_dispnotif "$who>RTE | typeCom = $typeCom | $what" "APG_receive_whatwho_default" 2

							RTE_rte_rcv $what

						} elseif { $typeCom == $::CMN_mnemotypecom_convoi } {

							APG_vrb_dispnotif "$who>RTE | typeCom = $typeCom | $what" "APG_receive_whatwho_default" 2

							RTE_rte_rcv_convoi $what

						} else {
							# PHY > PHY
							#PHY_snd_send $what $::APP
							APG_vrb_dispwarning "$who>RTE | Aucune action pour typecom=$typeCom" "APG_receive_whatwho_PHY"
						}
				} \
				default {
						# Reception d'un message d'une application autre que RTE.

						set typeCom  [APG_msg_splitstr what $::CMN_mnemotypecom]

						if { ($typeCom == $::CMN_mnemotypecom_unicast || \
							  $typeCom == $::CMN_mnemotypecom_multicast) } {

							set sens  [APG_msg_splitstr what $::CMN_mnemosens]
							set sauts  [APG_msg_splitstr what $::CMN_mnemosauts]
							set typeMsg  [APG_msg_splitstr what $::CMN_mnemotypemsg]
							set donnees  [APG_msg_endstr what $::CMN_mnemotypemsg true]

							APG_vrb_dispnotif "$who>RTE | typeCom = $typeCom, sens=$sens, sauts=$sauts, typeMsg=$typeMsg, données=$donnees" "APG_receive_whatwho_default" 2

							RTE_rte_new $typeCom $sens $sauts $typeMsg $donnees

						} elseif { $typeCom == $::CMN_mnemotypecom_convoi } {

							set adresseConvoiDestinataire  [APG_msg_splitstr what $::CMN_mnemoadresseconvoidestinataire]
							set adresseVehiculeDestinataire  [APG_msg_splitstr what $::CMN_mnemoadressevehiculedestinataire]
							set typeMsg  [APG_msg_splitstr what $::CMN_mnemotypemsg]
							set donnees  [APG_msg_endstr what $::CMN_mnemotypemsg true]

							APG_vrb_dispnotif "$who>RTE | typeCom = $typeCom | $what" "APG_receive_whatwho_default" 2

							RTE_rte_new_convoi $adresseConvoiDestinataire $adresseVehiculeDestinataire $typeMsg $donnees

						} elseif { $typeCom == $::CMN_mnemotypecom_sync_position } {

							APG_vrb_dispnotif "$who>RTE>PHY | typeCom = $typeCom | $what" "APG_receive_whatwho_default" 2

							# Redirection
							RTE_snd_send $what "PHY"

						} elseif { $typeCom == $::CMN_mnemotypecom_sync_adresses } {
							
							APG_vrb_dispnotif "$who>RTE | typeCom = $typeCom | $what" "APG_receive_whatwho_default" 2

							set adresse_vehicule [APG_msg_splitstr what $::CMN_mnemosyncadressevehicule]
							set adresse_convoi [APG_msg_splitstr what $::CMN_mnemosyncadresseconvoi]

							RTE_beacon_updateAdresses $adresse_convoi $adresse_vehicule

							# Mise à jour des adresse du véhicule
							set ::CMN_adresse_vehicule $adresse_vehicule
							set ::CMN_adresse_convoi $adresse_convoi

							APG_vrb_dispdebug "$who>RTE | Changement adresses $::CMN_adresse_vehicule:$::CMN_adresse_convoi" "APG_receive_whatwho_default"

						} elseif { $typeCom == $::CMN_mnemotypecom_rte } {
							
							APG_vrb_dispnotif "$who>RTE | typeCom = $typeCom | $what" "APG_receive_whatwho_default" 2

							set typeCom  [APG_msg_splitstr what $::CMN_mnemotypecom]

							if { $typeCom == $::CMN_mnemotypecom_beacon } {

								RTE_beacon_convois_voisins

							} else {

								APG_vrb_dispwarning "$who>RTE | Aucune action pour typemsg=$typeMsg" "APG_receive_whatwho_PHY"

							}

						} else {

							APG_vrb_dispwarning "$who>RTE | Aucune action pour typecom=$typeCom" "APG_receive_whatwho_PHY"

						}

						#RTE_snd_send $msg "PHY"
				}
}

