#    rte
#    an airplug compatible program
#    author: Yann Droniou
#    license type: free of charge license for academic and research purpose
#    see license.txt
### MODULE ROUTAGE ##########################################################

### VARIABLES DU MODULE #######################################################
set RTE_beacon_delay 3000
set RTE_beacon_sending false

set RTE_beacon_mnemoack "k"

set RTE_beacon_initlifes 9
set RTE_beacon_delaylife 1000


###############################################################################


### ZONE DU MODULE ############################################################
labelframe .beacon -pady 2 -padx 2 \
    -text "Beacon" -fg $APG_int_coltitle


button .beacon.btauto -text "Activer" \
		-activebackground $APG_int_colbutton \
		-foreground $APG_int_colbutton \
		-font $APG_int_fnbutton \
		-width 10 \
		-command RTE_beacon_btbeacon

labelframe .beacon.del -text "délai (ms)"
#set value $RTE_beacon_delay
spinbox .beacon.del.v -width 6 -textvariable RTE_beacon_delay -from 10 -to 10000 -increment 100 -justify right
.beacon.del.v set $RTE_beacon_delay

label .beacon.t1 -text "Réception de : "
# label .beacon.app -textvariable RTE_beacon_app -width 4 -fg $APG_int_colmsgbeacon
label .beacon.t2 -text "" -width 10 
# label .beacon.msg -textvariable RTE_beacon_msg -width 64  -fg $APG_int_colmsgbeacon -anchor w

label .beacon.t3 -text "Solitude : "
label .beacon.t4 -textvariable CMN_solitude

# # affichage des sous-zones de la zone beacon
pack .beacon.btauto .beacon.del -side left -fill y -pady 2
pack .beacon.del.v
pack .beacon.t1 .beacon.t2 -side left -fill y -pady 2
pack .beacon.t3 .beacon.t4 -side left -fill y -pady 2

###############################################################################

### PROCEDURE DE L'INTERFACE ##################################################
proc RTE_beacon_btbeacon { } {

		if { $::RTE_beacon_sending == false } {
				.beacon.btauto configure -text "Stop"
				set ::RTE_beacon_sending true
				RTE_beacon_autosend
		} else {
				after cancel RTE_beacon_autosend
				set ::RTE_beacon_sending false
				.beacon.btauto configure -text "Activer"
		}
}

###############################################################################

### PROCEDURES DU MODULE ######################################################
proc RTE_beacon_autosend { } {
    
	# Creation du message
	# TypeCom
	set msg [APG_msg_createmsg $::CMN_mnemotypecom $::CMN_mnemotypecom_beacon]

	# AdresseConvoi
	APG_msg_addmsg msg $::CMN_mnemoadresseconvoiemetteur $::CMN_adresse_convoi

    # AdresseVehicule
    APG_msg_addmsg msg $::CMN_mnemoadressevehiculeemetteur $::CMN_adresse_vehicule

	# ACK
	APG_msg_addmsg msg $::RTE_beacon_mnemoack 0

	# Envoi du beacon
    APG_send_whatwho $msg "PHY"
    
	after $::RTE_beacon_delay RTE_beacon_autosend
}

proc RTE_beacon_discover { what } {
	set ack  [APG_msg_splitstr what $::RTE_beacon_mnemoack]

	if { $ack == 0 } {

		set adresseConvoi  [APG_msg_splitstr what $::CMN_mnemoadresseconvoiemetteur]
		set adresseVehicule  [APG_msg_splitstr what $::CMN_mnemoadressevehiculeemetteur]

	   	if { ! [info exists ::tableVoisins($adresseVehicule:$adresseConvoi)] } {
	    	APG_vrb_dispdebug "Discover $adresseVehicule:$adresseConvoi" "RTE_beacon_discover"

	    	# Nouveau convoi détecté ?
	    	if { $adresseConvoi != $::CMN_adresse_convoi } {
	    		set exist false

	    		# Déjà détecté ?
	    		foreach {key life} [array get ::tableVoisins] {
					set key [split $key ":"]
					set adresseConvoiVoisin [lindex $key 1]

					if { $adresseConvoiVoisin == $adresseConvoi } {
						set exist true
					}
				}

				if { !$exist } {
	    			RTE_beacon_detection_convoi $adresseConvoi $adresseVehicule
	    		}
	   		}

	    }

	   	# Ajout dans la tableVoisins
	   	set ::tableVoisins($adresseVehicule:$adresseConvoi) $::RTE_beacon_initlifes

	   	# Envoi du ACK
		# TypeCom
		set msg [APG_msg_createmsg $::CMN_mnemotypecom $::CMN_mnemotypecom_beacon]

		# AdresseConvoi
		APG_msg_addmsg msg $::CMN_mnemoadresseconvoidestinataire $adresseConvoi

	    # AdresseVehicule
	    APG_msg_addmsg msg $::CMN_mnemoadressevehiculedestinataire $adresseVehicule

		# ACK
		APG_msg_addmsg msg $::RTE_beacon_mnemoack 1

		# Envoi du beacon
	    APG_send_whatwho $msg "PHY"

	} else {

		set adresseConvoi  [APG_msg_splitstr what $::CMN_mnemoadresseconvoidestinataire]
		set adresseVehicule  [APG_msg_splitstr what $::CMN_mnemoadressevehiculedestinataire]

		if { $adresseVehicule == $::CMN_adresse_vehicule && $adresseConvoi == $::CMN_adresse_convoi } {

			# Solution temporaire
			# Ajout dans la tableVoisins
		   	set ::tableVoisins($adresseVehicule:$adresseConvoi) $::RTE_beacon_initlifes

		   	RTE_beacon_solitude false

		}
	}
}


proc RTE_beacon_live { } {
	#APG_vrb_dispdebug "Update lifes beacon" "RTE_beacon_live"

	set info ""

	if { [array exists ::tableVoisins] } {
		foreach {key life} [array get ::tableVoisins] {
			set key [split $key ":"]
			set adresseVehicule [lindex $key 0]
			set adresseConvoi [lindex $key 1]

			#APG_vrb_dispdebug "Kill beacon - $adresseVehicule - $life" "RTE_beacon_live"
			if { $life >= 1 } {
				set ::tableVoisins($adresseVehicule:$adresseConvoi) [expr $life - 1]
				if { $adresseVehicule != $::CMN_adresse_vehicule } {
					append info "$adresseVehicule:$adresseConvoi\[$life\] "
				}
			} else {
				unset ::tableVoisins($adresseVehicule:$adresseConvoi)

				if { $adresseVehicule == $::CMN_adresse_vehicule } {

					RTE_beacon_solitude true
					
				} else {
					append info "$adresseVehicule\[X\] "
					APG_vrb_dispdebug "Perte liaison avec $adresseVehicule du convoi $adresseConvoi" "RTE_beacon_live"
				}
			}
			
		}
	}

	# Affichage
	.beacon.t2 configure -text [join $info "\n"]

	after $::RTE_beacon_delaylife RTE_beacon_live
}


proc RTE_beacon_detection_convoi { adresseConvoi adresseVehicule } {

	# TypeMsg
	set msg [APG_msg_createmsg $::CMN_mnemotypemsg $::CMN_mnemotypemsg_detection_convoi]

	# Adresse convoi
	APG_msg_addmsg msg $::CMN_mnemoadresseconvoidetectee $adresseConvoi

	# Adresse vehicule
	APG_msg_addmsg msg $::CMN_mnemoadressevehiculedetectee $adresseVehicule

	APG_send_whatwho $msg "CON"

	APG_vrb_dispdebug "RTE>CON | Détection d'une nouveau convoi $adresseVehicule:$adresseConvoi" "RTE_beacon_detection_convoi"
}


proc RTE_beacon_solitude { state } {

	if { $::CMN_solitude != $state } {

		set ::CMN_solitude $state

		# TypeMsg
		set msg [APG_msg_createmsg $::CMN_mnemotypemsg $::CMN_mnemotypemsg_solitude]

		# Solitude
		APG_msg_addmsg msg $::CMN_mnemosolitude $::CMN_solitude

		APG_send_whatwho $msg "CON"

		APG_vrb_dispdebug "Solitude=$::CMN_solitude" "RTE_beacon_live"
	}
}