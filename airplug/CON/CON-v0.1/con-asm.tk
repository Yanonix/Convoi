#    Con-assemblecon
#    an airplug compatible program
#    author: Marc-Antoine MARTIN (with Yann DRONIOU et Jonathan Diguet) UTC
#    license type: free of charge license for academic and research purpose
#    see license.txt
### MODULE CONVOY #############################################################

### VARIABLES DU MODULE #######################################################
set CON_asm_demande_autorisee true
set CON_asm_attente_demande_time 10000
# en ms <=> 10 sec
###############################################################################


labelframe .asm -pady 2 -padx 2 -text "Assemblage" -fg $APG_int_coltitle

label .asm.t1 -text "Demande autorisée : "
label .asm.a1 -textvariable ::CON_asm_demande_autorisee -width 5

pack .asm.t1 .asm.a1 -side left -fill y -pady 2


### PROCEDURES OF THE MODULE ##################################################

proc CON_asm_init {} {
	set ::CON_asm_demande_autorisee true
}

#-- Procedure CON_asm_detection_convoi_amont -----------------------------------------#
# Action : Détection d'un convoi en amont				      #
# Input  : adresseConvoi et adresseVehicule détecté			      #
# Output : nothing                                                            #
#-----------------------------------------------------------------------------#

proc CON_asm_detection_convoi { adresseConvoi adresseVehicule } {
	#Si on peux demander et que l'on est leader
	if { $::CON_asm_demande_autorisee == true && $::CON_cmn_leader == true } {

		APG_vrb_dispdebug "Demande assemblage avec $adresseVehicule:$adresseConvoi" "CON_asm_detection_convoi"

		# On créer un nouveau message contenant les données Nb Vehicules Convoi et coordonnées GPS
		set donnees [APG_msg_createmsg $::CON_mnemo_nb_vehicules_convoi $::CON_nb_vehicules_convoi]

		# Coordonnées GPS
		APG_msg_addmsg donnees $::CMN_mnemogps $::CMN_gps
		
		#on envoi un message à la dernière voiture que l'on voit dans la table beacon pour une demande d'assemblage
		CON_snd_convoi $adresseConvoi $adresseVehicule $::CON_mnemo_demande_assemblage $donnees
	}
}
###############################################################################

#-- Procedure CON_asm_timeout_attendre_demande --------------------------#
# Action : Fin du timer d'attente de demande	                              #
# Input  : nothing                                 	                      #
# Output : nothing                                                            #
#-----------------------------------------------------------------------------#
proc CON_asm_timeout_attendre_demande {} {
	set ::CON_asm_demande_autorisee true
	#Do it only once, we don't reuse "after X CON_asm_timeout_attendre_femande"
}
###############################################################################

#-- Procedure CON_asm_reception_demande_assemblage ----------------------#
# Action : Réception d'une demande d'assemblage d'un autre convoi             #
# Input  : adresseConvoiEmetteur adresseVehiculeEmetteur 		      #
#	   nbVehiculesRecus gps  					      #
# Output : nothing                                                            #
#-----------------------------------------------------------------------------#
proc CON_asm_reception_demande_assemblage {adresseConvoiEmetteur adresseVehiculeEmetteur nbVehiculesRecus gps} {

	set ecart [CMN_gps_ecart $gps $::CMN_gps]

	APG_vrb_dispdebug "Réception demande assemblage avec adresseVehiculeEmetteur:$adresseConvoiEmetteur ecart=$ecart nbVehiculesRecus=$nbVehiculesRecus" "CON_asm_reception_demande_assemblage"

	if { $ecart > 0 } {
		# Calcul la place disponible par rapport à la demande
		set nbVehiculesAcceptes [expr min([expr $::CMN_vehicule_max - $::CON_nb_vehicules_convoi], $nbVehiculesRecus)]
		
		# On créer un nouveau message contenant les données Nb Vehicules Acceptés et coordonnées GPS
		set donnees [APG_msg_createmsg $::CON_mnemo_nb_vehicules_convoi $nbVehiculesAcceptes]
		
		#Coordonées gps
		APG_msg_addmsg donnees $::CMN_mnemogps $::CMN_gps
		
		#envoi du message
		CON_snd_convoi $adresseConvoiEmetteur $adresseVehiculeEmetteur $::CON_mnemo_demande_assemblage_reponse $donnees
	}
}
###############################################################################

#-- Procedure CON_asm_reception_demande_assemblage_reponse --------------#
# Action : Réception d'une réponse de demande d'assemblage		      #
# Input  : adresseConvoiEmetteur adresseVehiculeEmetteur 		      #
#	   nbVehiculesAcceptes	 					      #
# Output : nothing                                                            #
#-----------------------------------------------------------------------------#
proc CON_asm_reception_demande_assemblage_reponse {adresseConvoiEmetteur adresseVehiculeEmetteur nbVehiculesAcceptes gpsAmont} {

	APG_vrb_dispdebug "Réponse demande assemblage $adresseVehiculeEmetteur:$adresseConvoiEmetteur gpsAmont=$gpsAmont nbVehiculesAcceptes=$nbVehiculesAcceptes" "CON_asm_reception_demande_assemblage_reponse"

	if { $nbVehiculesAcceptes > 0 } {
		CON_snd_unicast $::CMN_aval $nbVehiculesAcceptes $::CON_mnemo_separation_convoi
		
		#TODO: Procédure de rapprochement des convois (intégrer à la fin: CON_asm_reception_demande_assemblage_reponse_apres_rapprochement_convoi)
		#on déplace le véhicule juste derrière l'autre

		#CON_cmn_set_position [concat [expr [lindex gpsAmont 0] - 1] [lindex gpsAmont 1]] 
		CON_cmn_set_celerite [expr $::CON_cmn_celerite + $::CON_cmn_pas_celerite]
		
		# On créer un nouveau message contenant les adresses du véhicule émetteur
		set donnees [APG_msg_createmsg $::CON_mnemo_adressevehicule $adresseVehiculeEmetteur]
		
		# Coordonnées GPS
		APG_msg_addmsg donnees $::CON_mnemo_adresseconvoi $adresseConvoiEmetteur
	
		CON_snd_multicast $::CMN_aval $::CMN_infini $::CON_mnemo_update_identite $donnees
	
		#met à jour l'identité locale
		CON_cmn_maj_identite [expr $::CMN_adresse_vehicule + $adresseVehiculeEmetteur] $adresseConvoiEmetteur

		set ::CON_cmn_leader false
	
		# On créer un nouveau message contenant les données Nb Vehicules ajoutés
		set donnees [APG_msg_createmsg $::CON_mnemo_nb_vehicules_convoi $nbVehiculesAcceptes]
		
		CON_snd_unicast $::CMN_amont 1 $::CON_mnemo_assemblage_termine $donnees

	} else {

		set ::CON_asm_demande_autorisee false
		after $::CON_asm_timeout_attendre_demande

	}
}
###############################################################################

#-- Procedure CON_asm_reception_assemblage_termine ----------------------#
# Action : Réception d'une confirmation de terminaison d'assemblage	      #
# Input  : nbVehiculesAjoutes 						      #
# Output : nothing                                                            #
#-----------------------------------------------------------------------------#
proc CON_asm_reception_assemblage_termine { nbVehiculesAjoutes } {

	#On met à jour les nombres de véhicules dans le convoi amont
	set donnees [APG_msg_createmsg $::CON_mnemo_nb_vehicules_convoi $nbVehiculesAjoutes]
	CON_snd_unicast $::CMN_amont 1 $::CON_mnemo_update_nb_vehicules $donnees
	
	#On met à jour les nombres de véhicules dans le convoi aval
	set donnees [APG_msg_createmsg $::CON_mnemo_nb_vehicules_convoi $::CON_nb_vehicules_convoi]
	CON_snd_unicast $::CMN_aval 1 $::CON_mnemo_update_nb_vehicules $donnees

	incr ::CON_nb_vehicules_convoi $nbVehiculesAjoutes
}
###############################################################################
