#    Con-assemblecon
#    an airplug compatible program
#    author: Marc-Antoine MARTIN (with Yann DRONIOU et Jonathan Diguet) UTC
#    license type: free of charge license for academic and research purpose
#    see license.txt
### MODULE CONVOY #############################################################

### VARIABLES DU MODULE #######################################################
set CON_asm_demande_autorisee true
set CON_asm_attente_demande_time 600000 # en ms <=> 10 min
###############################################################################

### PROCEDURES OF THE MODULE ##################################################

proc CON_asm_init {} {
	set ::CON_asm_demande_autorisee true
}

#-- Procedure CON_asm_detection_convoi_amont -----------------------------------------#
# Action : Détection d'un convoi en amont				      #
# Input  : nothing							      #
# Output : nothing                                                            #
#-----------------------------------------------------------------------------#
proc CON_asm_detection_convoi_amont { } {
	if { $CON_asm_demande_autorisee == true } {
		foreach { convoi $tableConvois } {
			set choixVehicule 0
			foreach{ vehicule $tableConvois($convoi) } {
				set choixVehicule [expr {max(choixVehicule, $vehicule)}]
			}

			CON_snd_convoi $convoi $choixVehicule "Demande_assemblage" $nbVehiculeConvoi $::CMN_donneesGPS $::CMN_amont
		}
	}
}
###############################################################################
	
#-- Procedure CON_asm_timeout_attendre_demande --------------------------#
# Action : Fin du timer d'attente de demande	                              #
# Input  : nothing                                 	                      #
# Output : nothing                                                            #
#-----------------------------------------------------------------------------#
proc CON_asm_timeout_attendre_demande {} {
	set ::CON_asm_demande_autorisee true
	#Do it only once, we don't reuse "after X CON_asm_Timeout_Attendre_Demande"
}
###############################################################################

#-- Procedure CON_asm_reception_demande_assemblage ----------------------#
# Action : Réception d'une demande d'assemblage d'un autre convoi             #
# Input  : adresseConvoiEmetteur adresseVehiculeEmetteur 		      #
#	   nbVoituresRecu gps sens 					      #
# Output : nothing                                                            #
#-----------------------------------------------------------------------------#
proc CON_asm_reception_demande_assemblage {adresseConvoiEmetteur adresseVehiculeEmetteur nbVoituresRecu gps sens} {

	set ecart [CMN_gps_ecart gps CMN_gps]

	if { $ecart < 0 && $sens == CMN_amont } {
		# Calcul la place disponible par rapport à la demande
		set nbVoituresAcceptees [expr {min([expr VOITURES_MAX - nbVoituresConvoi], nbVoituresReçu)}]

		CON_snd_convoi $adresseConvoiEmetteur $adresseVehiculeEmetteur "demande_assemblage_reponse" $nbVoituresAcceptees
	}
}
###############################################################################

#-- Procedure CON_asm_reception_demande_assemblage_reponse --------------#
# Action : Réception d'une réponse de demande d'assemblage		      #
# Input  : adresseConvoiEmetteur adresseVehiculeEmetteur 		      #
#	   nbVoituresAcceptees	 					      #
# Output : nothing                                                            #
#-----------------------------------------------------------------------------#
proc CON_asm_reception_demande_assemblage_reponse {adresseConvoiEmetteur adresseVehiculeEmetteur nbVoituresAcceptees} {

	if { nbVoituresAcceptees > 0 } { #place(s) disponible(s) dans le convoi amont
		CON_snd_unicast $::CMN_aval $nbVoituresAcceptees $Separation_convoi #on demande une séparation du convoi à la nbVoituresAcceptées'ième voiture
		#TODO: Procédure de rapprochement des convois (intégrer à la fin: CON_asm_reception_demande_assemblage_reponse_apres_rapprochement_convoi
	} else {
		set ::CON_asm_demande_autorisee false
		after $::CON_asm_timeout_attendre_demande
	}
}
###############################################################################

proc CON_asm_reception_demande_assemblage_reponse_apres_rapprochement_convoi {} {
	CON_snd_multicast $::CMN_aval $::CMN_infini "UpdateIdentite" $adresseVehiculeEmetteur $adresseConvoiEmetteur) 
	set ::CMN_adresse_convoi adresseConvoiEmetteur
	set ::CMN_adresse_vehicule [expr $::CMN_adresse_vehicule + $adresseVehiculeEmetteur]
	#TODO: mettre à jour RTE et les autres
	CON_snd_unicast $::CMN_amont 1 "Assemblage_termine" $nbVoituresAjoutees
}

#-- Procedure CON_asm_Reception_Assemblage_Termine ----------------------#
# Action : Réception d'une confirmation de terminaison d'assemblage	      #
# Input  : nbVoituresAjoutees 						      #
# Output : nothing                                                            #
#-----------------------------------------------------------------------------#
proc CON_asm_Reception_Assemblage_Termine {nbVoituresAjoutees} {

	#On met à jour les nombres de véhicules dans chaque convoi
	CON_snd_unicast $::CMN_amont 1 "UpdateNbVehicule" $nbVoituresAjoutees
	#TODO: mettre $::CON_nb_vehicules_convoi en commun du convoi
	CON_snd_unicast $::CMN_aval 1 "UpdateNbVehicule" $::CON_nb_vehicules_convoi 

	set ::CON_nb_vehicules_convoi [expr $CON_nb_vehicules_convoi + $nbVoituresAjoutees]
}
###############################################################################

#-- Procedure CON_asm_MaJ_Identite --------------------------------------#
# Action : Met a jour les adresse du véhicule et du convoi assemblé	      #
# Input  : adresseVehiculeReçu adresseConvoiReçue			      #
# Output : nothing                                                            #
#-----------------------------------------------------------------------------#
proc CON_asm_maj_identite {adresseVehiculeRecu adresseConvoiRecue} {

	set ::CMN_adresse_convoi adresseConvoiReçue
	set ::CMN_adresse_vehicule [expr $::CMN_adresse_vehicule + $adresseConvoiRecue]
}
###############################################################################
