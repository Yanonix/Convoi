#    phy
#    an airplug compatible program
#    author: Bertrand Ducourthial AT utc.fr, Anthony Buisset (v0.1)
#    license type: free of charge license for academic and research purpose
#    see license.txt
### MODULE RECEPTION ##########################################################

### VARIABLES DU MODULE #######################################################
# dernier message recu
set PHY_rcv_msg $APG_msg_unknown

# application emettrice du dernier message (en cas d'option --whatwho)
set PHY_rcv_app $APG_msg_unknown

###############################################################################


### ZONE DU MODULE ############################################################
## zone du module reception
labelframe .rcv -pady 2 -padx 2 \
    -text "Réception \[$APP, ident = $APG_ident\]"  -fg $APG_int_coltitle

label .rcv.t1 -text "Dernier message reçu de "
label .rcv.app -textvariable PHY_rcv_app -width 4 -fg $APG_int_colmsgrcv
label .rcv.t2 -text " : "
label .rcv.msg -textvariable PHY_rcv_msg -width 64  -fg $APG_int_colmsgrcv -anchor w
pack .rcv.t1 .rcv.app .rcv.t2 .rcv.msg -side left -fill y -pady 2

# affichage des sous-zones de la zone rcv
pack .rcv.msg .rcv.app -side left -fill y -pady 2
###############################################################################


### OPTIONS DE LA LIGNE DE COMMANDE ###########################################
foreach option $APG_lstargs {
    set name [lindex [split $option "="] 0]
    set value [lindex [split $option "="] 1]
    
    switch -- $name {
				--source {
						#--------------------------------------------------------------------------------
						# applications emettrices auxquelles il faut s'abonner
						#--------------------------------------------------------------------------------
						if { $value == "" } {
								APG_vrb_dispwarning "option $name trouvee sans argument ; ignoree"
						} else {
								APG_vrb_dispnotif "option $option trouvee, abonnement a l'app source $value"
								APG_begin_lch $value
						}
				}
    }
}
###############################################################################

### PROCEDURES DU MODULE ######################################################

#-- Procedure APG_receive_whatwho --------------------------------------------#
# Action : gere la reception de messages                                      #
# Remarq : surcharge de LIBAPGTK                                              #
# Entree : payload et emetteur                                                #
# Retour : rien                                                               #
#-----------------------------------------------------------------------------#
proc APG_receive_whatwho { what who } {

		# Mise a jour de l'interface du module rcv.
    set ::PHY_rcv_msg $what
    set ::PHY_rcv_app $who

		# Traitement different selon l'emetteur.
    switch -- $::PHY_rcv_app \
				$::APP {
						# Reception d'un message d'une application PHY distante,

						# Simulation d'une liaison wireless
						set puissance_emission  [APG_msg_splitstr what $::PHY_mnemopuissance]
						set position  [APG_msg_splitstr what $::PHY_mnemoposition]

						set ecart [expr abs([CMN_gps_ecart $position $::CMN_gps]) - $puissance_emission + 1 ]
	
						if { $ecart <= $::PHY_rad_amplification_reception } {

							APG_vrb_dispnotif "$who>RTE | Message correcte $ecart" "APG_receive_whatwho_PHY" 3

							set typeCom  [APG_msg_splitstr what $::CMN_mnemotypecom]

							if { ($typeCom == $::CMN_mnemotypecom_beacon  || \
								  $typeCom == $::CMN_mnemotypecom_unicast || \
								  $typeCom == $::CMN_mnemotypecom_multicast || \
								  $typeCom == $::CMN_mnemotypecom_convoi) } {

								# PHY > RTE
								APG_vrb_dispnotif "$who>RTE | typeCom = $typeCom" "APG_receive_whatwho_PHY" 2
								PHY_snd_send $what "RTE"

							} else {

								# PHY > PHY
								# PHY_snd_send $what $::APP
								APG_vrb_dispwarning "$who>PHY | No action for $typeCom" "APG_receive_whatwho_PHY"

							}

						} else {

							APG_vrb_dispnotif "$who>RTE | Message trop faible $ecart" "APG_receive_whatwho_PHY" 3

						}
				} \
				default {
						# Reception d'un message d'une application autre que PHY.
						
						set typeCom  [APG_msg_splitstr what $::CMN_mnemotypecom]

						APG_vrb_dispnotif "$who>PHY | typeCom = $typeCom" "APG_receive_whatwho_default" 2

						if { ($typeCom == $::CMN_mnemotypecom_beacon || \
							  $typeCom == $::CMN_mnemotypecom_unicast || \
							  $typeCom == $::CMN_mnemotypecom_multicast || \
							  $typeCom == $::CMN_mnemotypecom_convoi) } {

							# RTE > PHY
							PHY_snd_send_wireless $what $::APP

						} elseif { $typeCom == $::CMN_mnemotypecom_sync_position } {

							# Update Position CMN_gps
							PHY_pos_update [APG_msg_splitstr what $::CMN_mnemosyncposition]

						} else  {

							APG_vrb_dispwarning "$who>PHY | No action for $typeCom" "APG_receive_whatwho_default"

						}
						
				}
}

