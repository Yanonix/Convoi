#    hlg
#    an airplug compatible program
#    author: Bertrand Ducourthial AT utc.fr, Anthony Buisset (v0.1)
#    license type: free of charge license for academic and research purpose
#    see license.txt
### MODULE RECEPTION ##########################################################

### VARIABLES DU MODULE #######################################################
# dernier message recu
set HLG_rcv_msg $APG_msg_unknown

# application emettrice du dernier message (en cas d'option --whatwho)
set HLG_rcv_app $APG_msg_unknown

# mnemonique pour le header HLG, contenant le nom de l'application qui a emis
# le message transporte.
set HLG_rcv_mnemoapp $HLG_rc_mnemoapp

# mnemonic for transporting the clock
set HLG_rcv_mnemoclk $HLG_rc_mnemoclk

# Mnemonic for transporting the snapshot signal
set HLG_rcv_mnemosnp $HLG_rc_mnemosnp
set HLG_rcv_mnemosnpst $HLG_rc_mnemosnpst

###############################################################################


### ZONE DU MODULE ############################################################
## zone du module reception
labelframe .rcv -pady 2 -padx 2 \
    -text "Réception \[$APP, ident = $APG_ident\]"  -fg $APG_int_coltitle

label .rcv.t1 -text "Dernier message reçu de "
label .rcv.app -textvariable HLG_rcv_app -width 4 -fg $APG_int_colmsgrcv
label .rcv.t2 -text " : "
label .rcv.msg -textvariable HLG_rcv_msg -width 64  -fg $APG_int_colmsgrcv -anchor w
pack .rcv.t1 .rcv.app .rcv.t2 .rcv.msg -side left -fill y -pady 2

# affichage des sous-zones de la zone rcv
pack .rcv.msg .rcv.app -side left -fill y -pady 2
###############################################################################


### OPTIONS DE LA LIGNE DE COMMANDE ###########################################
foreach option $APG_lstargs {
    set name [lindex [split $option "="] 0]
    set value [lindex [split $option "="] 1]
    
    switch -- $name {
				--source {
						#--------------------------------------------------------------------------------
						# applications emettrices auxquelles il faut s'abonner
						#--------------------------------------------------------------------------------
						if { $value == "" } {
								APG_vrb_dispwarning "option $name trouvee sans argument ; ignoree"
						} else {
								APG_vrb_dispnotif "option $option trouvee, abonnement a l'app source $value"
								APG_begin_lch $value
						}
				}
    }
}
###############################################################################

### PROCEDURES DU MODULE ######################################################

#-- Procedure APG_receive_whatwho --------------------------------------------#
# Action : gere la reception de messages                                      #
# Remarq : surcharge de LIBAPGTK                                              #
# Entree : payload et emetteur                                                #
# Retour : rien                                                               #
#-----------------------------------------------------------------------------#
proc APG_receive_whatwho { what who } {

		# Mise a jour de l'interface du module rcv.
    set ::HLG_rcv_msg $what
    set ::HLG_rcv_app $who
	APG_vrb_dispdebug "received msg from $who" "APG_receive_whatwho"
		# Traitement different selon l'emetteur.
    switch -- $::HLG_rcv_app \
				$::APP {
						# Reception d'un message d'une application HLG distante,
						# => transfert vers l'application BAS locale ou sauvegarde locale.
						
						# Recuperation de la valeur du champs application emettrice dans le
						# message recu.
						set app [APG_msg_splitstr what $::HLG_rcv_mnemoapp]
						set h_rcv [APG_msg_splitstr what $::HLG_rcv_mnemoclk]
						HLG_lam_update $h_rcv
						APG_vrb_dispdebug "received clock: $h_rcv" "APG_receive_whatwho"
						# Recuperation eventuelle d'autres champs.

						# Verifie s'il est demande de sauvegarder l'etat local?						
						set snp [APG_msg_splitstr what $::HLG_rcv_mnemosnp]
						set snp_st [APG_msg_splitstr what $::HLG_rcv_mnemosnpst]
						switch -- $snp \
							1 {
								# Message de type Signal de sauvegarde

								# verifie si l'on doit faire la sauvegarde
								if {$snp_st > [HLG_snp_getStatus]} {
									# il nous est demander de sauvegarder l'état local et on a pas encore sauvegardé
									HLG_snp_snapshot
									# met à jour le status de sauvegarde au cas où il ne soit pas à la derniere sauvegarde
									HLG_snp_setStatus [::math::max $snp_st [HLG_snp_getStatus]]
									#envoie de l'etat global recense
									HLG_snp_sendGlobalState 
								}
							} \
							2 {
								# Message de type Etat
								if {[HLG_snp_getInit] == $snp_st} {
									# si on est l'initiateur on recupere l'etat glocal recu et on l'ajoute a l'etat global du system
									set glocal [APG_msg_endstr what $::HLG_rcv_mnemosnpst true]
									APG_vrb_dispdebug "Ajout d'un etat glocal: $glocal" "APG_receive_whatwho"
									HLG_snp_addGlobalState $glocal
								} else {
									# renvoi du message sur l'anneau
									set msg [APG_msg_endstr what $::HLG_rcv_mnemoclk true]	
									HLG_snd_send $msg $who
								}
							} \
							defaut {
								# Ajout eventuel de traitements ici.

								# Recuperation du message qui a ete concatene au header
								# a l'emission. HLG_rcv_mnemoapp doit etre le dernier mnemonique
								# avant le message concatene. Adapter si des champs ont ete ajoutes.
								#set msg [APG_msg_endstr what $::HLG_rcv_mnemoapp true]
								set msg [APG_msg_endstr what $::HLG_rcv_mnemoclk true]

								# Transfert du message a l'application locale $app
								APG_vrb_dispdebug "Renvoie du msg vers $app" "APG_receive_whatwho"
								HLG_snd_send $msg $app
							}
				} \
				default {
						# Reception d'un message d'une application autre que HLG.
						# On suppose donc qu'il s'agit d'une application locale dont les
						# communications sont interceptees par HLG pour realiser un controle
						# sur son execution.
						# => transfert vers les applications HLG distantes.
						
						# Ajout eventuel de traitements ici.
						APG_vrb_dispdebug "resent msg to $::APP" "APG_receive_whatwho"
						# Creation d'un header contenant l'application emettrice.
						# Utilisation d'un mnemonique pour retrouver ce champs
						# facilement a la reception.
						set header [APG_msg_createmsg $::HLG_rcv_mnemoapp $who]

						# Ajout eventuel d'autres champs dans le header 
						APG_msg_addmsg header $::HLG_rcv_mnemoclk [HLG_lam_incrandget]

						# Formation du message en concatenant le header et le message recu.
						set msg [APG_msg_concatemsg $header $what]

						# Appel de la procedure d'emission pour emettre le message msg
						# vers d'autres applications HLG (cette procedure permet de mettre
						# a jour l'interface du module snd). NB : $::APP = "HLG".
						HLG_snd_send $msg $::APP
				}
}

